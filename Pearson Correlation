# This is the code for the cosine similarity measure. The formula and how it works is described in the paper.


#adding data
fulldata2 <- read.csv(file = "D:/Skola/Statestik Umea/Magister uppsats/Collaborative Filtering Dataset/dataset/ratings.csv", sep = ";", header = TRUE)

fulldata2$rating[fulldata2$rating == 0.5] <- 1
fulldata2$rating[fulldata2$rating == 1.5] <- 2
fulldata2$rating[fulldata2$rating == 2.5] <- 3
fulldata2$rating[fulldata2$rating == 3.5] <- 4
fulldata2$rating[fulldata2$rating == 4.5] <- 5


#creating a smaller dataset to reduce time for calculations due to time constraing for this project.
set.seed(55)
index <- sample(unique(fulldata2$userId), size = 100, replace = FALSE)
fulldata <- fulldata2[fulldata2$userId %in% index,]

length(unique(fulldata$movieId))

# renaming for simplicity. will not matter as the different datasets will not be compared to eachother
for (i in 1:length(unique(fulldata$userId))) {
  fulldata$userId[(fulldata$userId == unique(fulldata$userId)[i])] <- i
}

#function to index the unique movieId's for user U
find_items <- function(fulldata,U)
{  return( unique ( fulldata[fulldata$userId == U,]$movieId) )
}

#index unique movieId's for user U and V
find_items_both <- function(fulldata,U,V)
{ Uset <- find_items(fulldata,U)
Vset <- find_items(fulldata,V)
UV <- intersect(Uset,Vset)
return( UV)
}

#Pearson correlation function 
sUV_pear <- function(fulldata, U,V) {
  I_U_V <- find_items_both(fulldata, U, V)
  if(length(I_U_V) == 0)
    return(NA)
  if(length(I_U_V) != 0)
    top <- 0
  for (i in 1:length(I_U_V))
    top <- top + (fulldata[fulldata$movieId == I_U_V[i] & fulldata$userId == U,]$rating-mean(fulldata[fulldata$userId == U,]$rating))*
      (fulldata[fulldata$movieId == I_U_V[i] & fulldata$userId == V,]$rating-mean(fulldata[fulldata$userId == V,]$rating))
  sqrd_U <- 0
  for(i in 1:length(I_U_V))
    sqrd_U <- sqrd_U + ((fulldata[fulldata$movieId == I_U_V[i] & fulldata$userId == U,]$rating-mean(fulldata[fulldata$userId == U,]$rating))^2)
  sqrd_V <- 0
  for(i in 1:length(I_U_V))
    sqrd_V <- sqrd_V + ((fulldata[fulldata$movieId == I_U_V[i] & fulldata$userId == V,]$rating-mean(fulldata[fulldata$userId == V,]$rating))^2)
  term <- top/(sqrt(sqrd_U*sqrd_V))
  return(term)
}


#cacluclating the similarity values for a given user and saving them into a dataframe.
sim_coef <- function(fulldata, U) {
  sub_set <- subset(fulldata, fulldata$userId !=U)
  high_val <- matrix(nrow = length(unique(sub_set$userId)), ncol=2)
  unique_userId <- unique(sub_set$userId)
  for (V in 1:length(unique(sub_set$userId))){
    high_val[V,] <- c(sUV_pear(fulldata, U, unique_userId[V]), unique_userId[V])
  }
  colnames(high_val) <- c("Coefficient", "userId")
  return(as.data.frame(high_val))
}


#prediction function, returns predicted value for the movies given user.
prediction <- function(fulldata, U, K, coefficient) {
  k_ <- sort(coefficient[,1], na.last= TRUE, decreasing = TRUE)[1:K]
  select_k_users <- coefficient[coefficient[,1] %in% k_,] #get the users that are closest
  r_U <- mean(fulldata[fulldata$userId == U,]$rating) #get the mean of user U:s ratings
  i_U <- unique(fulldata[fulldata$userId == U,]$movieId) #get all the movieId:s for user U
  top <- 0
  bottom <- 0
  prediction <- matrix(nrow = length(i_U), ncol = 2)
  for (q in 1:length(i_U)) { #create a loop for every movieId of user U
    counter <- 0
    for (j in 1:length(select_k_users$userId)) { #create a loop for k-users that were chosen as closest

      if (i_U[q] %in% fulldata[fulldata$userId == select_k_users$userId[j],]$movieId){

        avg_r <- mean(fulldata[fulldata$userId == select_k_users$userId[j],]$rating) # calculate the avarage rating of k_j user
        r_k_i <- fulldata[fulldata$userId == select_k_users$userId[j] & fulldata$movieId == i_U[q],]$rating #finding the rating of user j on utem q
        top <- top + (select_k_users$Coefficient[j]*(r_k_i-avg_r)) #here we take the coefficient s(U,V) and multiply it with the difference
        bottom <- bottom + abs(select_k_users$Coefficient[j])

        counter <- counter+1
      }
    }
    if(counter == 0){
      prediction[q,1] <- r_U
    }
    if(counter > 0){
      prediction[q,1] <- r_U + top/bottom
    }
    prediction[q,2]<- i_U[q]

  }
  colnames(prediction) <- c("Predicted_value", "movieId")
  prediction[prediction[,1] >= 0.5 & prediction[,1] < 1.5,1] <- 1
  prediction[prediction[,1] >= 1.5 & prediction[,1] < 2.5,1] <- 2
  prediction[prediction[,1] >= 2.5 & prediction[,1] < 3.5,1] <- 3
  prediction[prediction[,1] >= 3.5 & prediction[,1] < 4.5,1] <- 4
  prediction[prediction[,1] >= 4.5,1] <- 5
  return(as.data.frame(prediction))
}

#setting upp the amount of K-closest neighbours to use.
k = c(5,10,15,20,30)

# predicted values of movies for user U given K.
K_sim_values <- function(U){
  len <- length(k)
  coefficient <- sim_coef(fulldata, U)
  prediction_user <- array(0,dim=c(len))
  for (i in 1:len) {
    prediction_user[i] <- prediction(fulldata,U,k[i],coefficient)
  }
  prediction_user <- as.data.frame(prediction_user)
  colnames(prediction_user) <- paste("K=[",k[1:len],"]", sep="")
  prediction_user$movieId <- fulldata$movieId[fulldata$userId == U]
  return(as.data.frame(prediction_user))
}

# Last step, evaluation of this method. Calculation of MAE, RMSE, precission, recall and f-value of different K values. Returns a table with all the values.
MAE_RMSE <- function(Z){
  dif_MAE <- c(0,0,0,0,0)
  MAX_MAE  <- c(0,0,0,0,0)
  dif_RMSE <- c(0,0,0,0,0)
  MAX_RMSE <- c(0,0,0,0,0)
  numirator <- c(0,0,0,0,0)
  Prec_denominator <- c(0,0,0,0,0)
  Rec_denominator <- c(0,0,0,0,0)
  results <- matrix()
  for (i in 1:Z){
    predis <- K_sim_values(i)
    for(K in 1:length(k)){
      dif_MAE[[K]] <- dif_MAE[[K]] + sum(abs(predis[,K] - fulldata$rating[fulldata$userId == i]))
      MAX_MAE[[K]] <- MAX_MAE[[K]] + length(unique(fulldata$movieId[fulldata$userId == i]))
      dif_RMSE[[K]] <- dif_RMSE[[K]] + sum((predis[,K] - fulldata$rating[fulldata$userId == i])^2)
      MAX_RMSE[[K]] <- MAX_RMSE[[K]] + length(unique(fulldata$movieId[fulldata$userId == i]))
      print(c((i/Z),K))
      L_r <- predis$movieId[predis[,K]>=4]  # movieId:s that should be reccomended to the user as predictions are >=4
      L_rev <- fulldata$movieId[fulldata$userId == i & fulldata$rating >=4]
      if( length(unique(intersect(L_r,L_rev))) > 0 )
        numirator[[K]] <- numirator[[K]] + length(unique(intersect(L_r,L_rev))) #numirator for precision and recall
      Prec_denominator[[K]] <- Prec_denominator[[K]] + length(unique(L_r)) #denominator for precision
      Rec_denominator[[K]] <- Rec_denominator[[K]] + length(unique(L_rev))
    }
  }
  prec <- numirator/Prec_denominator
  rec <- numirator/Rec_denominator
  F_score <- (2*prec*rec)/(prec+rec)
  MAE_res <- dif_MAE/MAX_MAE
  RMSE_res <- dif_RMSE/MAX_RMSE
  result <- data.frame(MAE_res,RMSE_res, prec, rec, F_score)
  result$K <- k
  colnames(result) <- c("MAE_res","RMSE_res", "Precission", "Recall", "F_score", "K")
  return(result)
}

PearsonCorr_20 <- MAE_RMSE(20)
